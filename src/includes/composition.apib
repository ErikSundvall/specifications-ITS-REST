## COMPOSITION [/ehr/{ehr_id}/composition]

Management of [COMPOSITION](https://specifications.openehr.org/releases/RM/latest/ehr.html#_composition_class) resources.


### Create composition [POST /ehr/{ehr_id}/composition]

+ Parameters

    + `ehr_id` (string) - EHR identifier taken from EHR.ehr_id.value

+ Request example1 (application/json)

    + Body

<!-- include(../examples/composition_01.json) -->

    + Headers

            Prefer: return={representation|minimal}

+ Response 201 (application/json)

    New COMPOSITION was created. Content body is only returned when `Prefer` header has `return=representation`, otherwise only headers are returned.

    + Headers

            Location: {baseUrl}/ehr/{ehr_id}/composition/{version_uid}
            ETag: {version_uid}

    + Body

<!-- include(../examples/composition_01.json) -->

+ Response 400
    
    Invalid `ehr_id` (i.e. an incorrectly formatted `ehr_id`).

    + Body    

+ Response 404

    The EHR with the supplied `ehr_id` did not exist.

    + Body

+ Request wrong type (application/json)

    + Body

<!-- include(../examples/wrong_type_01.json) -->

+ Response 400

    `400 Bad Request` either the body of the request could not be read (or converted to a COMPOSITION object) or there were COMPOSITION validation errors.

    + Body

            { /* see overview */
                "message": "Error message",
                "validationErrors": [
                    "error1", "error2"
                ]
            }


### Update composition [PUT /ehr/{ehr_id}/composition/{versioned_object_uid}]

Update `COMPOSITION` associated with the specified `ehr_id` and identified by `versioned_object_uid`.
If the request body already contains a COMPOSITION.uid.value, it must match the `versioned_object_uid` in the URL. 
The existing latest `version_uid` of `COMPOSITION` resource (i.e the `preceding_version_uid`) must be specified in the `If-Match` header.

+ Parameters

    + `ehr_id` (string) - EHR identifier taken from EHR.ehr_id.value
    + `versioned_object_uid` (string) - identifier of the COMPOSITION to be updated.

+ Request example1 (application/json)

    + Body

            {
                "_type": "COMPOSITION",
                "name": {
                    "_type": "DV_TEXT",
                    "value": "Vital Signs"
                },
                ...
            }

    + Headers

            Prefer: return=representation
            If-Match: {preceding_version_uid}

+ Response 200 (application/json)

    + Headers

            Location: {baseUrl}/ehr/{ehr_id}/composition/{version_uid}
            ETag: {version_uid}

    + Body

            {
                "_type": "COMPOSITION",
                "name": {
                    "_type": "DV_TEXT",
                    "value": "Vital Signs"
                },
                ...
            }

+ Request wrong type (application/json)

    + Headers

            If-Match: {preceding_version_uid}

    + Body

<!-- include(../examples/wrong_type_01.json) -->

+ Response 400 (application/json)

    Bad request: either the body of the request could not be read (or converted to a COMPOSITION object) or there were composition validation errors.

    + Body

            {
                "message": "Error message",
                "validationErrors": [
                    "error1", "error2"
                ]
            }

+ Request not found (application/json)

    + Body

            {
                "_type": "COMPOSITION",
                "name": {
                    "_type": "DV_TEXT",
                    "value": "Vital Signs"
                },
                ...
            }

    + Headers

            If-Match: {preceding_version_uid}

+ Response 404

    No EHR with the supplied `ehr_id` or no COMPOSITION with the supplied `versioned_object_uid`.

    + Body

+ Request version conflict (application/json)

    + Body

            {
                "_type": "COMPOSITION",
                "name": {
                    "_type": "DV_TEXT",
                    "value": "Vital Signs"
                },
                ...
            }

    + Headers

            If-Match: {preceding_version_uid}

+ Response 412

    `412 Precondition Failed` is returned when `If-Match` request header doesn't match the latest version (of this versioned object) on the service side.
    Returns also latest `version_uid` in the `Location` and `ETag` headers.

    + Headers

            Location: {baseUrl}/ehr/{ehr_id}/composition/{version_uid}
            ETag: {version_uid}

    + Body


### Delete composition [DELETE /ehr/{ehr_id}/composition/{preceding_version_uid}]

+ Parameters

    + `ehr_id` (string) - EHR identifier taken from EHR.ehr_id.value
    + `preceding_version_uid` (string) - identifier of the COMPOSITION to be deleted.
    This MUST be the last (most recent) version.

+ Response 204

    COMPOSITION was deleted.

    + Headers

            Location: {baseUrl}/ehr/{ehr_id}/composition/{version_uid}
            ETag: {version_uid}

    + Body

+ Response 400

    The composition with `preceding_version_uid` is already deleted.

    + Body

+ Response 404

    No EHR with the supplied `ehr_id` or no COMPOSITION with the supplied `preceding_version_uid`.

    + Body

+ Response 409

    Returned when supplied `preceding_version_uid` doesn't match the latest version.
    Returns latest version in the `Location` and `ETag` headers.

    + Headers

            Location: {baseUrl}/ehr/{ehr_id}/composition/{version_uid}
            ETag: {version_uid}

    + Body


### Get composition by version id [GET /ehr/{ehr_id}/composition/{version_uid}]

+ Parameters

    + `ehr_id` (string) - EHR identifier taken from EHR.ehr_id.value
    + `version_uid` (string) - VERSION identifier taken from VERSION.uid.value

+ Response 200 (application/json)

    + Body

            {
                "name": {
                    "_type": "DV_TEXT",
                    "value": "Vital Signs"
                },
                ...
            }

+ Response 204

    Returned when the composition is deleted (logically).

    + Body

+ Response 404

    No EHR with the supplied `ehr_id` or no COMPOSITION with the supplied `version_uid`.

    + Body


### Get composition at time [GET /ehr/{ehr_id}/composition/{versioned_object_uid}{?version_at_time}]

+ Parameters

    + `ehr_id` (string) - EHR identifier taken from EHR.ehr_id.value
    + `versioned_object_uid` (string) - COMPOSITION identifier taken from VERSIONED_COMPOSITION.uid.value
    + `version_at_time` (string, optional) - A timestamp in the ISO8601 format

+ Response 200 (application/json)

    + Headers

            Location: {baseUrl}/ehr/{ehr_id}/composition/{version_uid}
            ETag: {version_uid}

    + Body

            {
                "_type": "COMPOSITION",
                "name": {
                    "_type": "DV_TEXT",
                    "value": "Vital Signs"
                },
                ...
            }

+ Response 204

    The COMPOSITION at specified `version_at_time` time has been deleted.

    + Body

+ Response 404

    No EHR with the supplied `ehr_id` or no VERSIONED_COMPOSITION with the supplied `versioned_object_uid` or
    no COMPOSITION at specified `version_at_time` time.

    + Body



## VERSIONED_COMPOSITION [/ehr/{ehr_id}/versioned_composition]

Management of [VERSIONED_COMPOSITION](https://specifications.openehr.org/releases/RM/latest/ehr.html#_versioned_composition_class) resources.  


### Get versioned composition [GET /ehr/{ehr_id}/versioned_composition/{versioned_object_uid}]

Gets a `VERSIONED_COMPOSITION`.

+ Parameters

    + `ehr_id` (string) - EHR identifier taken from EHR.ehr_id.value
    + `versioned_object_uid` (string) - VERSIONED_COMPOSITION identifier taken from VERSIONED_COMPOSITION.uid.value

+ Response 200 (application/json)

    + Headers

            Location: {baseUrl}/ehr/{ehr_id}/versioned_composition/{versioned_object_uid}

    + Body

            {
                "uid": "xxx",
                "owner_id": "{ehr_id}",
                "time_created": "ISO8601 timestamp",
            }

+ Response 404

    No EHR with the supplied `ehr_id` or no VERSIONED_COMPOSITION with the supplied `versioned_object_uid`.

    + Body


### Get versioned composition revision history [GET /ehr/{ehr_id}/versioned_composition/{versioned_object_uid}/revision_history]

Gets a `VERSIONED_COMPOSITION` revision history.

+ Parameters

    + `ehr_id` (string) - EHR identifier taken from EHR.ehr_id.value
    + `versioned_object_uid` (string) - VERSIONED_COMPOSITION identifier taken from VERSIONED_COMPOSITION.uid.value

+ Response 200 (application/json)

    + Headers

            Location: {baseUrl}/ehr/{ehr_id}/versioned_composition/{versioned_object_uid}/revision_history

    + Body

            [
                {
                    "_type": "ORIGINAL_VERSION",
                    ...
                },
                {
                ...
            ]

+ Response 404

    No EHR with the supplied `ehr_id` or no VERSIONED_COMPOSITION with the supplied `versioned_object_uid`.

    + Body


### Get versioned composition version by id [GET /ehr/{ehr_id}/versioned_composition/{versioned_object_uid}/version/{version_uid}]

+ Parameters

    + `ehr_id` (string) - EHR identifier taken from EHR.ehr_id.value
    + `versioned_object_uid` (string) - VERSIONED_COMPOSITION identifier taken from VERSIONED_COMPOSITION.uid.value
    + `version_uid` (string) - VERSION identifier taken from VERSION.uid.value

+ Response 200 (application/json)

    + Body

            {
                "_type": "ORIGINAL_VERSION",
                "contribution": {},
                "signature": "...",
                "commit_audit": {},
                "uid": "...",
                "data": {
                    "_type": "COMPOSITION",
                    "name": {
                        "_type": "DV_TEXT",
                        "value": "Vital Signs"
                    }
                    ...
                }
            }

+ Response 404

    No EHR with the supplied `ehr_id` or no VERSIONED_COMPOSITION with the supplied `versioned_object_uid` or no VERSION with the supplied `version_uid`.

    + Body


### Get versioned composition version at time [GET /ehr/{ehr_id}/versioned_composition/{versioned_object_uid}/version{?version_at_time}]

+ Parameters

    + `ehr_id` (string) - EHR identifier taken from EHR.ehr_id.value
    + `versioned_object_uid` (string) - VERSIONED_COMPOSITION identifier taken from VERSIONED_COMPOSITION.uid.value
    + `version_at_time` (string, optional) - A timestamp in the ISO8601 format

+ Response 200 (application/json)

    + Headers

            Location: {baseUrl}/ehr/{ehr_id}/versioned_composition/{versioned_object_uid}/version/{version_uid}
            ETag: {version_uid}

    + Body

            {
                "_type": "ORIGINAL_VERSION",
                "contribution": {},
                "signature": "...",
                "commit_audit": {},
                "uid": "...",
                "data": {
                    "_type": "COMPOSITION",
                    "name": {
                        "_type": "DV_TEXT",
                        "value": "Vital Signs"
                    }
                    ...
                }
            }

+ Response 404

    No EHR with the supplied `ehr_id` or no VERSIONED_COMPOSITION with the supplied `versioned_object_uid` or no VERSION with the supplied `version_uid`.

    + Body
