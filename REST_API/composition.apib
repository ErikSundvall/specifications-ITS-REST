FORMAT: 1A
HOST: http://www.openehr.org/api/v1


<!-- include(overview.apib) -->

# Group COMPOSITION

## COMPOSITION [/ehrs/{ehr_id}/compositions]

### Create a new composition [POST /ehrs/{ehr_id}/compositions]

+ Parameters

    + ehr_id (string) - EHR id

+ Request

    + Body (application/json)

            {
                "_type": "COMPOSITION",
                "name": {
                    "_type": "DV_TEXT",
                    "value": "Vital Signs"
                },
                ...
            }

    + Headers

            Prefer: return={representation/minimal}

+ Response 201

    New composition was created. Content body is only returned when
    `Prefer` header has `return=representation` otherwise only headers are
    returned.

    + Headers

            Location: /ehrs/{ehr_id}/compositions/{version_uid}
            ETag: {version_uid}

    + Body

            {
                "_type": "COMPOSITION",
                "name": {
                    "_type": "DV_TEXT",
                    "value": "Vital Signs"
                },
                ...
            }

+ Response 400

    Bad request: either body of the request could not be read (or converted to a COMPOSITION object) or there were composition validation errors.

    + Body

            {
                "message": "Error message",
                "validationErrors": [
                    "error1", "error2"
                ]
            }

+ Response 404

    No EHR with the given id.

    + Body


### Update a composition [PUT /ehrs/{ehr_id}/compositions/{object_id}]

+ Parameters

    + ehr_id (string) - EHR id
    + object_id (string) - object id of the composition to update. This can be an exact version_uid or versioned_object_uid.
    In case of version_uid it has to be the last version.
    In case of versioned_object_uid, a `Match-If` header must be supplied with the last version_uid which must match before update can succeed.

+ Request

    + Body (application/json)

            {
                "_type": "COMPOSITION",
                "name": {
                    "_type": "DV_TEXT",
                    "value": "Vital Signs"
                },
                ...
            }

    + Headers

            Match-If: {preceding_version_uid}
            Prefer: return={representation/minimal}

+ Response 200 (application/json)

    Returned when `Prefer` header is set to `return=representation`.

    + Headers

            Content-Location: /ehrs/{ehr_id}/compositions/{version_uid}
            ETag: {version_uid}

    + Body

            {
                "_type": "COMPOSITION",
                "name": {
                    "_type": "DV_TEXT",
                    "value": "Vital Signs"
                },
                ...
            }

+ Response 204

    Returned when `Prefer` header is missing or NOT set to `return=representation`.

    + Headers

            Content-Location: /ehrs/{ehr_id}/compositions/{version_uid}
            ETag: {version_uid}

+ Response 400 (application/json)

    Bad request: either body of the request could not be read (or converted to a COMPOSITION object) or there were composition validation errors.

    + Body

            {
                "message": "Error message",
                "validationErrors": [
                    "error1", "error2"
                ]
            }

+ Response 404

    No EHR with the supplied EHR id or no composition with the supplied object id.

    + Body

+ Response 412

    Returned when:
    - supplied object_id is versioned_object_uid and `Match-If` header doesn't match the last version
    - supplied object_id is version_uid and it's not the last version

    Returns last version in the `Content-Location` and `ETag` headers.

    + Headers

            Content-Location: /ehrs/{ehr_id}/compositions/{version_uid}
            ETag: {version_uid}

    + Body

### Delete a composition [DELETE /ehrs/{ehr_id}/compositions/{object_id}]

+ Parameters

    + ehr_id (string) - EHR id
    + object_id (string) - object id of the composition to delete. This can be an exact version_uid or versioned_object_uid.
    In case of version_uid it has to be the last version.
    In case of versioned_object_uid, a `Match-If` must be supplied with the last version_uid which must match before update can succeed.

+ Request

    + Headers

            Match-If: {preceding_version_uid}

+ Response 204

    Composition was deleted.

    + Headers

            Content-Location: /ehrs/{ehr_id}/compositions/{version_uid}
            ETag: {version_uid}

    + Body

+ Response 404

    No EHR with supplied EHR id or no composition with the given object id.

    + Body

+ Response 412

    Returned when:
    - supplied object_id is versioned_object_uid and `Match-If` header doesn't match the last version
    - supplied object_id is version_uid and it's not the last version

    Returns last version in the `Content-Location` and `ETag` headers.

    + Headers

            Content-Location: /ehrs/{ehr_id}/compositions/{version_uid}
            ETag: {version_uid}

    + Body


### Get a composition by version uid [GET /ehrs/{ehr_id}/compositions/{version_uid}]

+ Parameters

    + ehr_id (string) - EHR id
    + version_uid (string) - version uid

+ Response 200 (application/json)

    + Body

            {
                "_type": "COMPOSITION",
                "name": {
                    "_type": "DV_TEXT",
                    "value": "Vital Signs"
                },
                ...
            }

+ Response 404

    No EHR with supplied EHR id or no composition with the supplied version uid.

    + Body

### Get a composition [GET /ehrs/{ehr_id}/compositions/{versioned_object_uid}{?versionSelector}]

+ Parameters

    + ehr_id (string) - EHR id
    + versioned_object_uid (string) - VERSIONED_COMPOSITION's uid
    + versionSelector (string, optional) - version time specifier

+ Response 200 (application/json)

    + Headers

            Content-Location: /ehrs/{ehr_id}/compositions/{version_uid}
            ETag: {version_uid}

    + Body

            {
                "_type": "COMPOSITION",
                "name": {
                    "_type": "DV_TEXT",
                    "value": "Vital Signs"
                },
                ...
            }

+ Response 204 (application/json)

    No composition at specified versionSelector.

    + Body

+ Response 404

    No EHR with the supplied EHR id or no composition with the supplied versioned_object_uid.

    + Body

## VERSIONED_COMPOSITION [/ehrs/{ehr_id}/versioned_compositions]

### Get a versioned composition [GET /ehrs/{ehr_id}/versioned_compositions/{versioned_object_uid}]

Gets a complete VERSIONED_COMPOSITION.

+ Parameters

    + ehr_id (string) - EHR id
    + versioned_object_uid (string) - VERSIONED_COMPOSITION's uid

+ Response 200 (application/json)

    + Headers

            Location: /ehrs/{ehr_id}/versioned_compositions/{versioned_object_uid}

    + Body

            {
                "uid": "xxx",
                "owner_id": "{ehr_id}",
                "time_created": "ISO8601 timestamp",
                "version_count: 12,
                "all_version_ids": [
                    "versioned_uid1",
                    "versioned_uid2",
                    ...
                ]
            }

+ Response 404

    No EHR with the supplied EHR id or no versioned composition with supplied versioned_object_uid.

    + Body


### Get a composition version by version_uid [GET /ehrs/{ehr_id}/versioned_compositions/{versioned_object_uid}/versions/{version_uid}]

+ Parameters

    + ehr_id (string) - EHR id
    + versioned_object_uid (string) - VERSIONED_COMPOSITION's uid
    + version_uid (string) - version uid

+ Response 200 (application/json)

    + Body

            {
                "contribution": {},
                "signature": "...",
                "commit_audit": {},
                "uid": "...",
                "data": {
                    "_type": "COMPOSITION",
                    "name": {
                        "_type": "DV_TEXT",
                        "value": "Vital Signs"
                    }
                    ...
                }
            }

+ Response 404

    No VERSIONED_COMPOSITION with uid or no version with version_uid.

    + Body

### Get a composition version [GET /ehrs/{ehr_id}/versioned_compositions/{versioned_object_uid}/versions{?versionSelector}]

+ Parameters

    + ehr_id (string) - EHR id
    + versioned_object_uid (string) - VERSIONED_COMPOSITION's uid
    + versionSelector (string, optional) - version time specifier

+ Response 200 (application/json)

    + Headers

            Location: /ehrs/{ehr_id}/versioned_compositions/{versioned_object_uid}/versions/{version_uid}
            ETag: {version_uid}

    + Body

            {
                "contribution": {},
                "signature": "...",
                "commit_audit": {},
                "uid": "...",
                "data": {
                    "_type": "COMPOSITION",
                    "name": {
                        "_type": "DV_TEXT",
                        "value": "Vital Signs"
                    }
                    ...
                }
            }

+ Response 404

    No no VERSIONED_COMPOSITION with uid or no version with version_uid.

    + Body
