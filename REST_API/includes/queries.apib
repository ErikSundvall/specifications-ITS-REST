## Stored queries [/definitions/queries]

-- Alternative suggestion instead of aql.apib --

Management of stored (registered) queries in the system. All stored queries automatically get an id, in the current API-version based on the SHA1-hash of the query content (including static parameters), thus if exactly same query is submitted more than once then no new id is generated.

Named queries are aliases that point to a specific query id, the aliases are reconfigurable and can be changed to point to a new query id.

Note that execution of queries is done using the resource: /query/{prefix}/{id}{?param_1,param_n}

### List named queries [GET /definitions/queries/name]

List all available named queries in the system and the current query-id that the name points to

+ Response 200 (application/json) 

    `200 OK` is returned when the resources are successfully retrieved.

    + Body

            [
                {
                    "name": "labs",
                    "id": "sha-1/fd625944dd9e2525630f0975d3dceb23f6825123"

                },
                {
                    "name": "vitals",
					"id": "sha-1/986fd9641b608f61d4041c058bafcfb369469c9d"
                }
            ]

### Show alias history of named queries [GET /definitions/queries/name/{name}]

List the what a specific named query has been pointing to over time. This is mainly for audit purposes.

+ Response 200 (application/json) 

    `200 OK` is returned when the resources are successfully retrieved.

    + Body

            [
                {
                    "valid-since": "2017-07-16T19:20:30.45+01:00",
                    "id": "sha-1/fd625944dd9e2525630f0975d3dceb23f6825123"
                },
                {
                    "valid-since": "2017-06-13T09:37:20.53+01:00",
                    "id": "sha-1/18a0cdc19228ae482f174ba2c71ddb911ead9336"
                }
            ]

			
### Create a stored query [POST /definitions/query{?type,mode}]

This resource operates in three modes
	* debug: if the query is translated to a storage specific query-language query then the translated query MAY be returned as text to the client in addition to other debug information. TBD document: 200 OK + 400 Bad Request 
	* store-only: stores query and redirects to /definitions/queries/sha-1/{id} using a Http response `201 Created`
	* store-and-execute: stores query and redirects to /query/{prefix}/{id} using a Http response `303 See other` Any parameters starting with ‘_’ (underscore) that are POSTed with the original query are interpreted as being dynamic and are – after removing the underscore – converted to URI-encoded parameters and included in the redirection URI /query/{prefix}/{id}. Thus the redirected GET request logged in the standard HTTP log contains the unique query-SHA and the dynamic parameter values used in the call. Static parameters can be used for example to send extra configuration parameters to query translators. Static parameters are stored together with the query and included (sorted in alphabetical order as a JSON text string) in the calculated SHA-1 checksum.
	
TBD: Perhaps use /definitions/query/{type} instead?
TBD: Determmine request types (json, url-encode etc)

+ Parameters

    + type: `AQL`(string) - the query language/type 
	+ mode (string) - the mode; debug, store-only or store-and-execute (TBD: default)) 
	

+ Request

	TBD: Add form-url-enccoded not just JSON...
    
    + Body 

            {
                "q": "SELECT c FROM EHR e[ehr_id/value=:ehr_id] CONTAINS COMPOSITION c[openEHR-EHR-COMPOSITION.encounter.v1] CONTAINS OBSERVATION o[openEHR-EHR-OBSERVATION.laboratory_test.v0]"
				"static-example-parameter" : "Lorem Ipsum 1"
				_dynamic-example-parameter" : "Lorem Ipsum 2"
            }

			
			
+ Response 201

    `201 Created` is returned when the query has been successfully uploaded to the server.

    + Headers

            Location: /definitions/queries/sha-1/{id}
			
+ Response 303

    `303 See other` is returned when the query has been successfully uploaded to the server.

    + Headers

            Location: /query/{prefix}/{id}

+ Response 200

    `200 OK` is returned in debug mode when the query has been successfully parsed.


+ Response 400 

    `400 Bad Request` is returned when the server was unable to create a new stored AQL, could be due to incorrect request body (could not be parsed, etc)

    + Body 

### Get stored query and info/metadata [GET /definitions/queries/sha-1/{id}]

+ Parameters
    
    + id (string) - query id

+ Response 200 (application/json)
    `200 OK` is returned when the stored AQL is successfully retrieved.
	
	TBD: add more metadata in response regarding creator, creation time, static parameters, possibly usage statistics (hit counter) etc 

    + Body 

                {
                    "id": "sha-1/fd625944dd9e2525630f0975d3dceb23f6825123",
                    "aql": "SELECT c FROM EHR e[ehr_id/value=:ehr_id] CONTAINS COMPOSITION c[openEHR-EHR-COMPOSITION.encounter.v1] WHERE c/name/value = 'Vitals'"
                }

+ Response 404 (application/json)
    `404 Not Found` is returned when the stored AQL with supplied id doesn't exist.

    + Body


	
### Create name/alias for a stored query [POST /definitions/queries/name/{name}]

+ Parameters

    + type: `AQL`(string) - the query language/type 

+ Request

	TBD: Add form-url-enccoded not just JSON...
    
    + Body 

            {
                "id" : "sha-1/fd625944dd9e2525630f0975d3dceb23f6825123"
            }

			
			
+ Response 201

    `201 Created` ??? 

    + Headers

            Location: /definitions/queries/sha-1/{id}
			

+ Response 200

    `200 OK` 


+ Response 400 

    `400 Bad Request` is returned when the server was unable to fulfill the request
   