## Stored queries [/definitions/queries]
-- Alternative suggestion instead of aql.apib --

Management of stored (registered) queries in the system. All stored queries automatically get an id, 
in the current API-version based on the SHA1-hash of the query content (including static parameters), 
thus if exactly same query is submitted more than once then no new id is generated.

Named queries are aliases that point to a specific query id, the aliases can be crated and reconfigured
to point to a new query id using [POST /definitions/queries/name/{name}]
The aliasing history can be audited using [GET /definitions/queries/name/{name}].

Note that execution of queries is done using the resource: /query/{prefix}/{id}{?param_1,param_n}

TBD: clarify variable indicator in AQL - is it : or $ - so should it be :ehr_id or $ehr_id in query example?

### List named queries [GET /definitions/queries/name]

List all available named queries in the system and the current query-id that the name points to

+ Response 200 (application/json) 

    `200 OK` is returned when the resources are successfully retrieved.

    + Body

            [
                {
                    "name": "labs",
                    "id": "sha-1/fd625944dd9e2525630f0975d3dceb23f6825123"
                },
                {
                    "name": "vitals",
                    "id": "sha-1/986fd9641b608f61d4041c058bafcfb369469c9d"
                },
                {
                    "name": "emergency-ward-weekly-statistic-batch",
                    "id": "batch/0d7dd181459e729addce84867071a2a11d4328f7"
                }
            ]

### Create name/alias for a stored query [POST /definitions/queries/name/{name}]


+ Parameters

    + name: `example-query`(string) - the query language/type 

+ Request

    TODO: Add form-url-encoded and XML encoding alternatives for to request body in addition to JSON...
    TBD: possibly add a special id "deleted" or "inactive" for deactivated names that should no longer be used/executed but still auditable using GET /definitions/queries/name/{name}. Alternative call implemenetation: add a http DELETE /definitions/queries/name/{name}
    
    + Body 

            {
                "id" : "sha-1/fd625944dd9e2525630f0975d3dceb23f6825123"
            }
       
+ Response 201

    `201 Created`

    + Headers

            Location: /definitions/queries/name/{name}
            
+ Response 200

            `200 OK` 

+ Response 400 

            `400 Bad Request` is returned when the server was unable to fulfill the request
   
### Show alias history of a named query [GET /definitions/queries/name/{name}]

List what a specific named query has been pointing to over time. This is mainly for audit purposes.

+ Response 200 (application/json) 

    `200 OK` is returned when the resources are successfully retrieved.

    + Body

            [
                {
                    "valid-since": "2017-07-16T19:20:30.45+01:00",
                    "id": "sha-1/fd625944dd9e2525630f0975d3dceb23f6825123"
                },
                {
                    "valid-since": "2017-06-13T09:37:20.53+01:00",
                    "id": "sha-1/18a0cdc19228ae482f174ba2c71ddb911ead9336"
                }
            ]

### Create a stored query [POST /definitions/query{?type,mode}]

TBD: Perhaps use `/definitions/query/{type}{?querymode}` instead?
TBD: Determmine request types (json, form-url-enccoded etc)
TBD: Determine if/how we provide simple post-processing of XML and JSON AQL result sets - see suggested post-process-json and post-process-xml
TODO: Add form-url-encoded and XML encoding alternatives for to request body in addition to JSON...

This resource operates in several modes:
    *   `validate` - the query is analyzed/validated but not stored or executed. If the query is translated to a storage
        specific query-language query then the translated query MAY be returned in the response to the client in addition
        to other debug information. TBD: document when results 200 OK or 400 Bad Request are sent.
    *   `store-only` - stores query and redirects to /definitions/queries/sha-1/{id} using a Http response `201 Created`.
        To later execute the query /query/sha-1/{id} should be called
    *   `store-and-execute` - stores query and redirects to /query/sha-1/{id} using a Http response `303 See other` 
        Any parameters starting with `_` (underscore) that were POSTed with the original query are interpreted as being 
        dynamic and are – after removing the underscore – converted to URI-encoded parameters and included in the 
        redirection URI /query/{prefix}/{id}. Thus the redirected GET request logged in the standard HTTP log contains
        the unique query-SHA and the dynamic parameter values used in the call. Static parameters can be used for example 
        to send extra configuration parameters to query translators. Static parameters are stored together with the query 
        and included (sorted in alphabetical order as a JSON text string) in the calculated SHA-1 checksum.
    *   `store-batch` - stores a query intended for long-running or scheduled batch-jobs and redirects to 
        /definitions/queries/batch/{id} using a Http response `201 Created`. 
        To later start execution or scheduling, /query/batch/{id} should be called.
        In the current api version the `id` of of batsh queries SHOULD be created using the same SHA-1 as the other stored queries

+ Parameters
    + type: `AQL` (string) - indicating the query language/type (presently usually AQL, but future additions possible) 
    + querymode: `store-only` (string) - indicating the mode; debug, store-only, store-and-execute, store-batch (TBD: decide default)) 

+ Request

    + Body

            {
                "q": "SELECT c FROM EHR e[ehr_id/value=:ehr_id] CONTAINS COMPOSITION c[openEHR-EHR-COMPOSITION.encounter.v1] CONTAINS OBSERVATION o[openEHR-EHR-OBSERVATION.laboratory_test.v0]",
                "static-parameter-example" : "Lorem Ipsum 1",
                "dynamic-parameter-example" : "Lorem Ipsum 2", // TODO: add an underscore in front of dynamic-parameter-example in a way that does non break apib
                "uri-template" : "{observation-archetype-id}/{some-other-path-parameter-example}",
                "post-process-json" : "/definition/scripts/js/laboratory_test_view.js"
                "post-process-xml" : "/definition/scripts/xslt/laboratory_test_view.xslt"
            }

+ Response 201

    In store-only and store-batch mode `201 Created` is returned when the query has been successfully uploaded to the server.

    + Headers

            Location: /definitions/queries/{prefix}/{id}
            
+ Response 303

    In store-and-execute mode `303 See other` is returned when the query has been successfully uploaded to the server.

    + Headers

            Location: /query/{prefix}/{id}

+ Response 200

            `200 OK` is returned in debug mode when the query has been successfully parsed.


+ Response 400 

    `400 Bad Request` is returned when the server was unable to create a new stored AQL, could be due to incorrect request body (could not be parsed, etc)

    + Body 

### Get stored query and info/metadata [GET /definitions/queries/{prefix}/{id}]

+ Parameters
    
    + id (string) - query 
    + prefix (string) - A prefix indicating type of identifier, in this API version "name" for manually named queries or "sha-1" for query-content-based auto-generated ids. Se details in documentation for /definitions/queries/.
        + Members
            + `name`
            + `sha-1`   

+ Response 200 (application/json)
    `200 OK` is returned when the stored AQL is successfully retrieved.
    
    TBD: add more metadata in response regarding creator, creation time, static parameters (including e.g. uri-template if set)
    TBD: determine if  usage statistics (hit counter) etc should be returned in some standardized way. If so, then here or somewhere under /query?
 
    + Body 

                {
                    "id": "sha-1/fd625944dd9e2525630f0975d3dceb23f6825123",
                    "type" : "AQL",
                    "q": "SELECT c FROM EHR e[ehr_id/value=:ehr_id] CONTAINS COMPOSITION c[:compositionid] WHERE c/name/value = 'Vitals'",
                    "static-parameter-example" : "Lorem Ipsum 1",
                    "uri-template": "/{compositionid}",
                    "post-process-json" : "/definition/scripts/js/laboratory_test_view.js",
                    "post-process-xml" : "/definition/scripts/xslt/laboratory_test_view.xslt"
                }

+ Response 404 (application/json)
    `404 Not Found` is returned when the stored AQL with supplied id doesn't exist.

    + Body


### Generating hash-based query ID

    It is RECOMMENDED that the SHA-1 hash used as identifier for the query storage is generated in a standard deterministic d
    by the following pseudo-code: 
        *   create a collection/list of all parameters (the sum of from POSTed body parameters and the url parameters)
        *   remove any parameters prefixed by underscore `_` and remove the `querymode` parameter
        *   remove trailing whitespace from parameter values
        *   sort the remaining parameters in alphabetical order 
        *   and convert to compact JSON - TBD: Or is other format preferred?
        *   Generate SHA-1 based 0n the above produced JSON string

Example code (in some programming languages) of this procedure will later be linked to here. Related currently existing code: 
https://github.com/LiU-IMT/EEE/blob/065c11ad1ec45a7c0c91586431472a89b78bfc13/src/main/java/se/liu/imt/mi/eee/ehr/res/Query.java

TBD: Should avoidance of (very unusual) hash collisions be discussed in the spec? (It is not hard to
implement, just an extra comparison step of the un-hashed parameter collectrion during the processing
of the POST call) 