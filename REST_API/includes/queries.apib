## Stored queries [/definitions/queries]

-- Alternative suggestion instead of aql.apib --

Management of stored (registered) queries in the system. All stored queries automatically get an id, in the current API-version based on the SHA1-hash of the query content (including static parameters), thus if exactly same query is submitted more than once then no new id is generated.

Named queries are aliases that point to a specific query id, the aliases are reconfigurable and can be changed to point to a new query id.

Note that execution of queries is done using the resource: /query/{prefix}/{id}{?param_1,param_n}

### List named queries [GET /definitions/queries/named]

List all available named queries in the system and the current query-id that the name points to

+ Response 200 (application/json) 

    `200 OK` is returned when the resources are successfully retrieved.

    + Body

            [
                {
                    "name": "labs",
                    "id": "sha-1/fd625944dd9e2525630f0975d3dceb23f6825123"

                },
                {
                    "name": "vitals",
					"id": "sha-1/986fd9641b608f61d4041c058bafcfb369469c9d"
                }
            ]

### Show alias history of named queries [GET /definitions/queries/named/{name}]

List the what a specific named query has been pointing to over time. This is mainly for audit purposes.

+ Response 200 (application/json) 

    `200 OK` is returned when the resources are successfully retrieved.

    + Body

            [
                {
                    "valid-since": "2017-07-16T19:20:30.45+01:00",
                    "id": "sha-1/fd625944dd9e2525630f0975d3dceb23f6825123"
                },
                {
                    "valid-since": "2017-06-13T09:37:20.53+01:00",
                    "id": "sha-1/18a0cdc19228ae482f174ba2c71ddb911ead9336"
                }
            ]

			
### Create a stored query [POST /definitions/query{?type}]

+ Parameters

    + type:  (string) - the id under which AQL will be available for execution (GET /query/{id})

+ Request
    
    + Body 

            {
                "aql": "SELECT c FROM EHR e[ehr_id/value=:ehr_id] CONTAINS COMPOSITION c[openEHR-EHR-COMPOSITION.encounter.v1] CONTAINS OBSERVATION o[openEHR-EHR-OBSERVATION.laboratory_test.v0]"
            }

+ Response 201

    `201 Created` is returned when the guide has been successfully uploaded to the server.

    + Headers

            Location: /definitions/aqls/{id}


+ Response 400 

    `400 Bad Request` is returned when the server was unable to create a new stored AQL, could be due to incorrect request body (could not be parsed, etc)

    + Body 

### Get stored AQL [GET /definitions/queries/named/{id}]

+ Parameters
    
    + id (string) - AQL id

+ Response 200 (application/json)
    `200 OK` is returned when the stored AQL is successfully retrieved.

    + Body 

                {
                    "id": "vitals",
                    "aql": "SELECT c FROM EHR e[ehr_id/value=:ehr_id] CONTAINS COMPOSITION c[openEHR-EHR-COMPOSITION.encounter.v1] WHERE c/name/value = 'Vitals'"
                }

+ Response 404 (application/json)
    `404 Not Found` is returned when the stored AQL with supplied id doesn't exist.

    + Body

### Delete stored AQL [DELETE /definitions/aqls/{id}]

+ Parameters

    + id (string) - AQL id

+ Response 204 (application/json)
    `204 No content` is returned when the stored AQL was successfully deleted.

    + Body

+ Response 404 (application/json)
    `404 Not Found` is returned when the stored AQL with supplied id doesn't exist.

    + Body

