## Query [/query]

These resources adhere to the pattern /query/{prefix}/{id}/{extra-path-paramaters}?{query-parameters} the prefixes used in this version of the specification are:
    * `aql` - is used for non-stored ad hoc AQL-queries, e.g. useful for test and development
    * `sha-1` - is used for stored queries automatically named using a sha-1 hash of the static query content
    * `batch` - is used for long-running or scheduled. To start execution or scheduling, POST /query/batch/{id} should be called
    * `name` - is used for manually aliased/named stored queries (e.g. providing an alternative path to some `sha-1` or `batch` queries)

The optional `{extra-path-paramaters}` is processed by the query engine to extract dynamic parameters from the path using the pattern in a uri-template specified in the static parameter `uri-template` that was provided when storing queries using `POST /definitions/query`

The {query-parameters} is used for dynamic parameters in the `GET /query/{prefix}/{id}` described below.

See API-description of /definitions/queries for more information regarding naming, {prefix} and {extra-path-paramaters}

Http header information regarding all resources under /query:
If the http header `ehr_id` is present in the request it MUST contain a single openEHR `ehr_id`.
Clients SHOULD send the ehr_id header if they know that the query concerns only a singe EHR.
The presence of such a header:   
    * SHOULD be used by the server to provide the variable `ehr_id` in queries with the value of the header, overriding any static or dynamic parameters named `ehr_id` and
    * MAY also be used by the server to restrict querying to only the identified EHR and 
    * MAY also be used by the server to route (e.g. in sharded scale-out systems) based on ehr_id without first having to analyze the request body and 
    * MAY also be used by the server to handle ETag and If-None-Match http headers based on the latest known change to the identified EHR (e.g. by using the latest contribution uid of the identified EHR as ETag value) so that query responses can be safely cached (confirmed by http response code 304 Not Modified) and do not need to be re-run until changes may have occured.

The absence of the http header 'ehr_id' means that the stored query or dynamic request parameters MAY contain a list of several ehr_ids or be unconstrained regarding ehr_id (e.g. population queries).

### Execute ad-hoc AQL query [GET /query/aql{?q}]

Execute an AQL query 

NOTE: we might add a header to indicate which EHR to execute against to
allow systems that need to route based of EHR id to do so without having
to analyze the request body.

TBD: Add query url length warning?

+ Parameters 
    + q - The AQL to be executed 

+ Response 200 (application/json)

        {
            /* See discussion on resultset in overview */
        }

### Execute ad-hoc AQL query [POST /query/aql]

Execute an AQL query.

NOTE: we might add a header to indicate which EHR to execute against to
allow systems that need to route based of EHR id to do so without having
to analyze the request body.

NOTE: We might add support for the request format application/x-www-form-urlencoded

TBD: Add logging advice?

+ Request (application/json)

    + Body

            {
                "aql": "<the aql to be performed>",
                "aql_parameters": [{
                    "parameter-x-name": "parameter-x-value",
                    "parameter-y-name": "parameter-y-value"
                }],
                "offset": NUMBER_TO_START_FROM,
                "fetch": NUMBER_TO_FETCH,
                "composition_uids": ["<object_id>"], // filter on the given compositions uids
                "ehr_ids": ["<ehr_id>"] // filter on the given ehr_ids
            }

+ Response 200 (application/json)

         {
           /* Se discussion on resultset in overview */
         }

### Execute stored query [GET /query/{prefix}/{id}/{extra-path-paramaters}{?offset,fetch,dynamic_parameter,dynamic_parameter_n}]

Execute a stored query with the supplied prefix+id. 

All query parameters found except "offset" and "fetch" are treated as dynamic and sent to the query execution engine.
For parameters in AQL queries, see `http://www.openehr.org/releases/QUERY/latest/docs/AQL/AQL.html#_parameters`

+ Request 
    + Headers

            ehr_id: fc334f45-ffb7-4077-8134-4d3d5e6cb2a1
            If-None-Match: cdbb5db1-e466-4429-a9e5-bf80a54e120b
        
    + Parameters
        + prefix - A prefix indicating type of identifier, in this API version "name" for manually named queries or "sha-1" for query-content-based auto-generated ids. Se details in documentation for /definitions/queries/.
            + Members
                + `name`
                + `sha-1`    
        + id - Id of the stored query to be executed
        + offset (optional) - Query response row number to start from 
            + Default: 0
        + fetch (optional) - Number of query response rows to fetch (from offset). For AQL queries: use wisely if combined with `http://www.openehr.org/releases/QUERY/latest/docs/AQL/AQL.html#_top`
        + dynamic_parameter (optional) - dynamic query parameter used in stored query. 
        + dynamic_parameter_n (optional) - dynamic query parameter n. 
        
+ Response 200 (application/json)
    + Headers

            Etag: cdbb5db1-e466-4429-a9e5-bf80a54e120b

    + Body

            {
                  /* See discussion on resultset in overview */
            }

+ Response 200 (application/xml)
    + Headers

            Etag: cdbb5db1-e466-4429-a9e5-bf80a54e120b
        
    + Body

            /* See discussion on resultset in overview */    
        
### Execute stored query [POST /query/{prefix}/{id}]

Execute a stored query with the supplied prefix+id. 

If the http header 'ehr_id' is present in the request it MUST contain a single openEHR ehr_id.
Clients SHOULD send the ehr_id header if they know that the query concerns only a singe EHR.
The presence of such a header:   
    * MAY be used by the server to restrict querying to only the identified EHR, and 
    * it MAY also be used by the server to route (e.g. in sharded scale-out systems) based on ehr_id without first having to analyze the request body, 
The absence of the http header 'ehr_id' means that the stored query or dynamic request parameters MAY contain a list of several ehr_ids or be unconstrained regarding ehr_id (e.g. population queries).

TBD: Do we want XML Request and Response formats for POST /query/{prefix}/{id}? 
TBD: Do we want to filter on containment in folders? 

NOTE: The body of a POST request is usually not logged in the http log by default, so developers need to make sure to log the body content some other way in order to enable auditing of what query parameters have been executed. 

+ Request (application/json)

    + Headers
        ehr_id: fc334f45-ffb7-4077-8134-4d3d5e6cb2a1
        If-None-Match: cdbb5db1-e466-4429-a9e5-bf80a54e120b
        
    + Parameters
        + prefix - A prefix indicating type of identifier, in this API version "name" for manually named queries or "sha-1" for query-content-based auto-generated ids. Se datails in documentation for /definitions/queries/.
            + Members
                + `name`
                + `sha-1`    
        + id - Id of the stored query to be executed

    + Body

            {
                "aql_parameters": [
                    {
                        "parameter-x-name": "paramater-x-value",
                        "parameter-y-name": "parameter-y-value"
                    }
                ],
                "offset": NUMBER_TO_START_FROM,
                "fetch": NUMBER_TO_FETCH,
                "composition_uids": ["<object_id>"], // filter on the given compositions uids
                "ehr_ids": ["<ehr_id>"] // filter on the given ehr_ids (for muliti-ehr queries)
            }

+ Response 200 (application/json)

         {
           /* Se discussion on resultset in overview */
         }

### Execute stored batch-job query [POST /query/batch/{id}]

TBD: very much like [POST /query/{prefix}/{id}] but we need some special parameters regarding scheduled time etc.
The response should redirect (using suitable response code and location header) to  /query/batch/{id}/{result-id}
    -   ...

### Fetch stored batch-job query result [GET /query/batch/{id}/{result-id}]

+ Request 
            
    + Parameters
        + id - Id of the stored query to be executed
        + result-id - Id of the expected result 
        
+ Response 102  (application/json)
 
    `102 Processing` is sent if the expected result is not available yed (e.g. because of still processing or scheduled execution time time not reached yet).

+ Response 200 (application/json)
 
    + Body

            {
                  /* See discussion on resultset in overview */
            }

+ Response 200 (application/xml)
        
    + Body

            /* See discussion on resultset in overview */  