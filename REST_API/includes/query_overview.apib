# Group Query Requirements

## Purpose 

This specification describes the service endpoints and data-models used when querying an openEHR system. 

AQL [Archetype Query Language](#http://www.openehr.org/releases/QUERY/latest/docs/AQL/AQL.html) is the primary query language. 

The query `response` may also be used for other endpoints in the openEHR REST API. 
I.e. there might be specified filter/query parameter on Composition resources. These operations will return the `response`
structure defined here. 

## Functional requirements

The following is an outline of the functional requirements which this specification is made to solve: 

- Query functions
- Single EHR queries
- Population queries 
- Batch queries
- Stored queries

### Query functions 

Query functions are operators/functions which tune and modify the execution of a specific query. The following types of query functions are identified:

- Parameters 
- Scope 

**Parameters** within an AQL is define as `:parameter_name`. These parameters will be substituted by the server into the actual query that will be executed.

**Scope** is a way to define the set of compositions to be considered when running queries. _Examples_ of this might be: 

- Episode(s) of care 
- Period(s) of care
- Workflow 

> Parameters and Scope might be used in combination. One example might be: 
> _I want to query all Temperature entries created after last saturday, and which where registered to a specific Episode of care._ 

### Single EHR queries
A common use-case is to execute queries within a specific EHR. 
For single EHR queries the endpoint and resources will be as much aligned to the RM classes as possible. 
That's why the `ehr_id` is added to the path for these queries.

### Population queries
Population queries are queries which are executed on several EHRs in the same request. Examples of use-cases will be: 

- Ward lists 
- Explore correlations between patients in an pandemic situation
- Research, e.g. epidemiology, population health


### Batch queries
Most application will present different data points in the same screen. 
The data-points will be collected from different archetypes committed in multiple compositions. 
To supplement this kind of use-cases the endpoint must provide batch query operations. 

Batch query is an operation (e.g. request) where the client submits several queries to be executed within the same operation. 
The `correlation_id` is used to correlate the queries provided by the client with specific results in the `RESULT_SET`. 

### Stored queries 
Stored queries are queries which are present on the server pre-request time. 
The queries will expose mandatory and optional parameters for the clients. 

## Non-functional requirements

Some of the non-functional requirements will be: 

- Low payload 
- Ease of use 
- Security 
- Synchronous/Asynchronous

### Security 

- Audit logging 
-- Be able to tell who executed which queries
- Authorization 
-- AQL is open ended - how to deal with authorization on data structures when exposing an open AQL endpoint? 


# Group Data structures

## Request structure 
Below is a mostly self-documented (?) AQL request.

```JSON 
{
  "aql": "select o/data[at0002]/events[at0003 and name/value='Any event']/data[at0001]/items[at0004]/value/magnitude as temperature, o/data[at0002]/events[at0003 and name/value='Any event']/data[at0001]/items[at0004]/value/units as unit from EHR[ehr_id/value='554f896d-faca-4513-bddf-664541146308d'] CONTAINS Observation o[openEHR-EHR-OBSERVATION.body_temperature-zn.v1] WHERE o/data[at0002]/events[at0003 and name/value='Any event']/data[at0001]/items[at0004]/value/magnitude > :temperature and o/data[at0002]/events[at0003 and name/value='Any event']/data[at0001]/items[at0.63 and name/value='Symptoms']/value/defining_code/code_string=:chills order by temperature desc fetch 3",
  "aql_parameters": {
    "temperature": 38.5,
    "chills": "at0.64"
  },
  "composition_uids": [ //optional list of composition uids to filter the query on
    "90910cf0-66a0-4382-b1f8-c0f27e81b42d::default::1"
  ],
  "ehr_ids": [ //optional list of ehr ids to filter the query on
    "81433066-c417-4813-9b29-79783e7bed23"
  ]
}
```

## Response structure 

### Metadata 

| Field | Description |
|------|-------------|
|`_href`| URL of the query executed (only for GET endpoint) |
|`_type`| Defines type of the serialized object | 
|`_schema_version` | The version of the specification defining the serialized object |
|`_created`| Result creation timestamp (in full ISO8601 format) |
|`_generator` | Some identifier of the application that generated the result. Useful i.e. for debugging | 
|`_executed_aql` | The actual query (i.e. AQL) that was executed by the server after exploding the parameters. This attribute is not mandatory, but is useful for debugging |

### Data 

|Field | Description |
|------|-------------|
| `name`            | Name of a query when registered as a stored query
| `aql`             | The AQL which was given in the request 
| `columns`         | Columns are defined by the client provided with the given AQL. I.e. `select c/uid/value as CidValue, c/context/start_time as StartTime from .... ` will give two columns. One columns for CidValue and another for StartTime.
| `columns.name`    | Name of the column. I.e. CidValue or StartTime from the example above, when column alias is not present in the AQL a 0-based column index is used prefixed by a hash sign (i.e. `#0`, `#1`...)
| `columns.path`    | Path from the given AQL of the specified column. I.e. columns CidValue will have path `/uid/value` 
| `rows`            | Ordered list with results.
| `rows.row`        | Each row list of cells. One cell for each column. Content of a cell is `ANY` (i.e. a `OBJECT` in most programming languages) 

### ResultSet example

Below is a synthesized response with all attributes.

```JSON
{
  "meta": {
    "_href": "<the URI for the executed AQL - used only for GET executions >",
    "_type": "RESULTSET",
    "_schema_version": "1.0.0",
    "_created": "2017-08-19T00:25:47.568+02:00",
    "_generator": "DIPS.OpenEhr.ResultSets.Serialization.Json.ResultSetJsonWriter (5.0.0.0)",
    "_executed_aql": "< the executed aql >", /* should only be returned in debug mode */
  },
  "name": "<the name/identifier of the stored query that was executed>",
  "aql": "select e/ehr_id/value, c/context/start_time/value as startTime,  c/uid/value as cid, c/name from EHR e contains  Composition c limit 2",
  "columns": [
    {
      "name": "#0",
      "path": "/ehr_id/value"
    },
    {
      "name": "startTime",
      "path": "/context/start_time/value"
    },
    {
      "name": "cid",
      "path": "/uid/value"
    },
    {
      "name": "#3",
      "path": "/name"
    }
  ],
  "rows": [
    [
      "81433066-c417-4813-9b29-79783e7bed23",
      "2017-02-16T13:50:11.308+01:00",
      "90910cf0-66a0-4382-b1f8-c0f27e81b42d::default::1",
      {
        "_type": "DV_TEXT",
        "value": "Labs"
      }
    ]
  ]
}
```
